#import "conf.typ" : conf
// #import "@preview/cetz:0.2.2"
#import "@preview/plotst:0.2.0"
#import "@preview/fletcher:0.4.5" as fletcher: diagram, node, edge

#show: conf.with(
  title: [Lection 2],
  type: "referat",
  info: (
      author: (
        name: [Григорев],
        faculty: [КНиИТ],
        group: "251",
        sex: "male"
      ),
      inspector: (
        degree: "",
        name: ""
      )
  ),
  settings: (
    title_page: (
      enabled: true
    ),
    contents_page: (
      enabled: true
    )
  )
)

= Арефметические операции

== Сложение и вычитание 

=== Сложение вычитание выполняется беззнаковых чисел выполняется по правилам аналогичным сложению (вычитанию) по модулю 2 принятым в математике

$ x + y = (x + y)m o d 2^k$ $x + y$ и $C F = 0$ если $X + Y < 2^k$

$ x + y = (x + y)m o d 2^k$ $x + y - 2^k$ и $C F = 1$ если $X + Y >= 2^k$

e.g.

$250 + 10 = (250 + 10) m o d 2^3 = 4$

$ x - y = (x - y)m o d 2^k$ $x - y$ и $C F = 0$ если $X >= Y$

$ x - y = (x - y)m o d 2^k$ $x + y - 2^k$ и $C F = 1$ если $X < Y$

$1 - 2 = 1 + 2^8 - 2 = 255, C F =1$

=== Для чисел со знаком:

$X = 10^n - |X|$, n --- разрядность

$-1 = 256 - 1 = 255 = 11111111_2$

$3 + (-1) = (3 + (-1)) m o d 256 = (3 + 255)m o d 2 5 6 = 2$

$1 + (-3) = (1+ (-3))m o d 256 = (1 + 253) m o d 256 = 254 = 11111110_2$

Перполнение при выполнении операци происходит, если есть перенос из знакового разряда, а из старшего цифрового разряда перноса нет и наоборот

Программист сам должен следить с какими данными работает, со знаковыми или беззнаковыми и реагировать на флажок переноса и соответственно реагировать

Арифметические операции меняют значение флажков: OF, CF, SF, ZF, AF, PF

=== В ассемблере комманда "+": 

```asm
ADD OP1, OP2  ; (OP1) - (OP2) -> OP1
ADC OP1, OP2  ; (OP1) - (OP2) -(CF) -> OP1
XADD OP1, OP2 ; i486 и > (OP1) <-> (OP2) (меняет местами), (OP1) - (OP2) -> OP1
INC OP1       ; OP1 - 1 -> OP1
```

=== В ассемблере комманда "-": 

```asm
SUB OP1, OP2  ; (OP1) - (OP2) -> OP1
SBB OP1, OP2  ; (OP1) - (OP2) - (CF) -> OP1
DEC OP1       ; (OP1) - 1 -> OP1 
```

=== Примеры:

$X = 1234A B 12h. Y = 5618C D 34h.$ $X + Y$:

```asm
MOV AX, 1234h
MOV BX, OAB112h
MOV CX, 5678h 
MOV DX, 0CD34h
ADD BX, DX
ADC AX, CX
```

$X - Y =$


```asm
SUB BX, DX
SBB AX, CX
```

=== В коммандах сложения и вычитания можно использовоать любые способы адресации:

```asm
ADD AX, mas[SI]
SUB DX, mas[BX][DI]
ADD CX, 32h
```

=== Пример 1: 

```asm
MOV AL, 95h
ADD AL, 82h
```

$ 95h + 82h = 117h $

$ 95 = 10010101_2 $

$ 82 = 10000010_2 $

$ 10010101_2 + 10000010_2 = 1 0001 0111 $,

$C F =1$ , $O F = 1$, $Z F = 0$,  $A F = 0$, $P F = 1$.

=== Пример 2:

```asm 
MOV AL, 9h 
SUB AL, 5h
```

$ 9h - 5h = 4h, 5 = 00000101_2, -5 = 11111011_2, 9 = 00001001_2 $

$ 9 - (-5) = 11111011 - 00001001 = 1 0000 0100 $

$C F = 1, O F = 0, S F = 0, Z F = 0, A F = 1, P F = 0$

== Умножение и деление 

=== Умножение беззнаковых чисел

```asm
MUL OP2 ; (OP3) * (AL) и (AX) и (EAX) -> AX и DX:AX и  EDX:EAX. 
```

=== Умножение знаковых чисел:

1. ```asm 
IMUL OP2 ; аналогично MUL mul ax : DX:AX = AX * AX
```
2. ```asm
IMUL OP1, OP2 ; i386 и > 
```
3. ```asm 
IMUL OP1, OP2, OP3 ; i186 и > 
```

OP1 всегда  R, OP2 - D или  R, или M.

OP3 - всегда D, не байты, результат в OP1 

Для 1. при умножении результат имеет удваоенный формат по отношению к сомножетилям. Иногда мы точно знаем, что результат может уместиться в формат сомножетелей, тогда мы извлекаем его из AL, AX, EAX.

Размер результата можно выяснить с помощью флагов OF и CF.

Если OF = CF = 1, результат занимаемой двойной формат, иначе OF и CF.

Примеры:
```asm 
imul cl ; AX = AL * CL 
imul si ; DX:AX = AX * SI 
imul bx, ax ; BX = BX * AX 
imul cx, -5 ; CX = CX * (-5)
imul dx, bx, 134h ; DX = BX *134h
```

=== Деление без знаковых чисел

```asm 
DIV OP2 ; OP2 = r и m
IDIV OP2 ; OP2 = r и m
```

$(A X) or (D X: A X) or (E D X : E A X)$ делится на указанный операнд и результат помещается в $A L or A X or E A X$ остаток помещается в $A H or D X or E D X$

Значение флагов не меняется, но может наступить деление на 0 или переполнение, если 1) OP2 = 0. 2) частное не умещается в отведенное место ему место. Например:

```asm
MOV AX, 600
MOV BH, 2 
DIV BH ; 600 div 2 = 300  - не умещается в AL
```

При использовании арифметических операций необходимо следить за размером операндов ...

=== Пример:

Необходимо цифры целого беззнаового байтового числа N записать в байты памяти, начиная с адреса D как символы. N - (abc)

```asm 
c = N mod 10 
b = (N div 10) mod 10 
a = (N div 10) div 10 
;первод в символы: код (i) = ('0') + i 
;-----------------------
N DB ?
D DB 3 DUP (?)
;-----------------------
MOV BL, 10 ; делитель 
MOV AL, N ; делимое
MOV AH, 0 ; расширяем делимое до слова 
; или CBW AH конвертируем до слова
DIV BL ; AL = ab, AH = c 
ADD AH, '0'
MOV D+2, AH 
MOV AH, 0 
DIV BL  ; AL = a, AH = b
Add AL, '0'
MOV D, AL
ADD AH,'0'
MOV D+1, AH 
;----------------------
```

= Директивы внешних ссылок

Директивы внешних ссылок позволяют организовать связь между различными модулями и файлами, рамположенными на диске

Public \<name> [, \<name>, ... , \<name>] ---
