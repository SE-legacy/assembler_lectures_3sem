
#import "conf.typ" : conf
#import "@preview/plotst:0.2.0"
#import "@preview/fletcher:0.4.5" as fletcher: diagram, node, edge

#show: conf.with(
  title: [Lection 8],
  type: "referat",
  info: (
      author: (
        name: [Смирнов],
        faculty: [КНиИТ],
        group: "251",
        sex: "male"
      ),
      inspector: (
        degree: "",
        name: ""
      )
  ),
  settings: (
    title_page: (
      enabled: true
    ),
    contents_page: (
      enabled: true
    )
  )
)

= Передача параметров по ссылке в блоке параметров

Если парметров много, например, массив, адрес начала массива, как блока параметров, можно передать через регистр, даже если результат ПП не будет записываться по этому адресу.

Даны два циелых положительных чисел без знака
```asm
X DB 100 dup (?)
Y DB 50 dup (?)
```

Вычислить *DL = max (X[i]) + max (Y[i])*, использовав процедуру max(A[i]), перессылка адрес массива через регитср BX, а результат сохраняя в AL фрагмент программы



```asm
lea BX, X
mov CX, 100
call max   ; AL = max (X[i])
mov DL, AL  ; DL = max (X[i])
lea BX, Y
mov CX, 50
call max    ; AL = max (Y[i])
add DL, AL
```

Процедура max: AL = max(A(0...n-1)), BX --- начальный адрес A, CX = n 

```asm
max proc 
    push CX
    push BX
    mov AL, 0 ; начальное значение max
    met1:
        cmp [BX], AL
        jle met2  
        mov AL, [BX]
    met2: 
        inc BX
        loop met1
        pop BX
        pop CX
        ret 
max endp
```

= Передача параметров через стек

Этот способ передача параметров называют универсальным, его можно использовать при любом кол-ве параметров, хотя он сложнее чем передача параметров через регистры. Но для передачи результатов чаще используют регистры.

Если ПП имеет k параметров $PP(a_1, a_2, ... a_k)$ размером в слово и параметры сохраняются в стеке в последовательности слева направо, то команды реализующие обращение к ПП, должны быть следующими:

```asm
; обращение к процедуре PP 
push a1 
push a2 
-----------------------
push ak 
call PP 
```

содержимое стека при входе в PP

*картинка*

Обращение к параметрам в процедуре можно осуществить с помощью регитсра BP, присвоив ему значение SP.

Но при этом мы испортим старое значение BP, которое может бытть используется в основной программе. Поэтому следует в начеле сохранить старое значение BP и стеке, а затем использовать его для доступа к параметрам, т.е. тело процедуры должно начинаться следующими командами:

```asm
PP proc near
    push BP
    mov BP, SP
    ------------
```

В стеке после выполнения этих команд:

*Картинка*

Для доступа к последнему параметру можно использовать выражение [BP + 4], например, mov AX, [BP + 4]; ak AX

После \<\<входных действий>> в ПП идут команды, реализующие вспомогательный алгоритм, а за ними д.б. команды, реализующие \<\<выходные действия>>:
```asm
    pop BP  ; восстановить старое значение BP
    ret 2*k  ; очистка стека от k параметров
PP endp  ; возврат в вызывающую программу
```

n в команде *ret n* --- это кол-во освобождаемых байтов в стеке, поэтому кол-во параметров д.б. умножено на длину параметра......

Команда ret  вначале считывает значение *av*, а затем удаляет из стека параметры. Очистку стека можно выполнять не в ПП, а после выхода из нее в основной программе, сразу после команды *call PP*, например, командой *add SP, 2\*k* Каждый способ имеет свои достоинства и недостатки, если в ПП, то исполняемый код будет короче, если в основной программе, то можно вызвать ПП несколько раз с одними и теме же параметрами последовательными командами *call*.

Для удобства использования параметров, переданных черех стек, внутри ПП можно использовать директиву equ, чтобы при каждом обращении к параметрам не писать точное смещение относительно BP.
```asm
    push x
    push z
    call PP 
    -------------
pp proc near  ;процедура
    push BP
    mov BP, SP
    pp_x equ [BP + 8]
    pp_x equ [BP + 6]
    pp_x equ [BP + 4]
-----------------------
    mov AX, pp_x  ; использование параметра x 
-----------------------
    pop BP
    ret 6
pp endp
```
= Пример передачи параметров через стек.

Пусть процедура заполняет нулями массив A[0...n-1], основная программа обращается к ней для обнуления массивов X[0...99] и Y[0...49]. Через стек и ПП передается имя массива и его размер, размер можно передавать по значению, а имя массива нужно передавать по ссылке, т.к. этот параметр является и входным и выходным.

```asm
; процедура zero_1
zero_1 proc
    push BP   ; входные
    mov BP, SP  ; действия
    push BX   ; сохранение значений
    push CX   ; регистров
    mov CX, [BP + 4]  ; CX = n считывание из стека
    mov BX, [BP + 6]  ; BX = A параметров
    m1: 
        mov byt ptr [BX], 0 ; цикл обнуления
        inc BX  ; массива
        loop m1   ; A[0..n-1]
; восстановление регистров и выходные действия
    pop CX
    pop BX
    pop BP
    ret 4 
zero_1 endp
```

Фрагмент основной программы:

```asm
X DB 100 dup (?)
Y DB 50 dup (?)
-------------------
    lea AX, X ; загрузка параметров
    push AX   ; адреса массива X 
    mov AX, 100 ; и его размера 
    push AX  ; в стек
    call zero_1   ; обращение к ПП
    lea AX, Y ; загрузка параметров для массива Y
    push AX
    mov AX, 50
    push AX
    call zero_1   ; обращение к ПП
```

= О передаче параметров в ПП

1. Передача по значению:

```asm
mov AX, word ptr value
call PP
```
2. передача по ссылке:

```asm
mov AX, offset value
call PP
```

3. Передача параметров по возвращаемому значению объединяет передачу по значению и по ссылке: процедуре передается адрес переменной, она делает локальную копию  этого параметра, работает с этой компией, а в конце процедуры записывает эту копию по переданному адресу. Этот механихм оказывается эффективным, если процедуре приходится много раз обращаться к параметру в глобальной переменной.

4. Передача параметров по результату заключается в том, что ПП передается адрес только для записи по этому адресу результата работы ПП.

5. Передача параметров по имени макроопределения. Пример:

```asm
name macro parametr
    mov AX, parametr
name endm
```

Обращение к ПП может быть таким:

```asm
name value  ; обращение к макро
call PP     ; обращение к ПП
```

6. Передача параметров отложенным вычислением. Как и в случае передачи параметров по имени макро, процедура получает адрес ПП, вычисляющей значение параметра. Этот механизм чаще используется в системах искусственного интелекта и в ОС.

= Использование локальных параметров.

Если локальных параметров немного, то их размещают в регистрах, но если их много, то вохможны различные варианты, им можно отвести место в сегменте данных, но тогда большую часть времени эта область в памяти не будет использоваться.

Лучший способ --- разместить локальные параметры в стеке на время работы ПП, а перед выходом из ПП их удалить. Для этого после входных действий в процедуре нужно уменьшить значение указателя на вершину стека SP на кол-во байтов, необходимо для хранения локальных величин и затем записывать их в стек и извлекать их можно с помощью выражений вида BP. Например, есл предплагается, что ПП будет использовать 3 локальные параметра размеров слово, то стек графически можно представить:

*Картинка*

При выходе из процедуры перед выпонением завершающих действий нужно возвратить регистру SP его значение.

Если в стеке хранятся и фактически и локальные параметры, то начало процедуры и ее завершение должно выглядеть следующим образом:

```asm
PP proc
    push BP     ; сохранить старое значение BP
    mov BP, SP  ; (SP) ->  в BP
    sub SP, kl  ; отвести в стеке kl  байтов под локальные параметры
    push AX     ; сохранить в стеке регистры используемые в ПП
    ------------------ 
    <тело процедуры>
    ------------------ ; востановить регистры
    pop AX
    mov SP, BP  ; восстановить SP, т.е. освободить место в стеке от локальных параметров
    pop BP      ; восстановить BP, равными до обращения в ПП
    ret k2      ; очистка стека от фактических параметров и возврат в вызывающую программу
PP endpp        ; конец ПП
```

= Подстчет кол-ва различных символов в заданлй строке.
